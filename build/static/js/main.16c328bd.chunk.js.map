{"version":3,"sources":["components/PersonForm.js","components/Contact.js","components/Persons.js","components/SearchFilter.js","services/names.js","components/Notification.js","App.js","index.js"],"names":["PersonForm","addPerson","newName","handleNameChange","newNumber","handleNewNumber","onSubmit","value","onChange","type","Contact","props","person","name","number","onClick","event","handleDeletePerson","id","Persons","persons","filter","ignore","map","key","SearchFilter","handler","baseUrl","axios","get","then","response","data","newObject","post","put","console","log","delete","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","newFilter","setNewFilter","errorMessage","setErrorMessage","useEffect","dbService","target","preventDefault","personObject","Math","floor","random","x","includes","window","confirm","find","p","changedPerson","returnedPerson","setTimeout","concat","catch","error","toUpperCase","n","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16c328bd.chunk.js","sourcesContent":["import React from 'react'\n// komponentin tehtävä on renderöidä lomake\n// funktion argumentteina metodit, joita se käyttää\n// kenttien onChange-tapahtumankäsittelijät kutsuvat funktiota aina kun kentän arvo muuttuu\nconst PersonForm = ( {addPerson, newName, handleNameChange, newNumber, handleNewNumber }) => {\n    return(\n        <form onSubmit={addPerson}>\n        <div>\n        name: <input value={newName} onChange={handleNameChange}/>\n        </div>\n        <div>\n        number: <input value={newNumber} onChange={handleNewNumber}/>\n        </div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n// komponentin tehtävä on esittää/renderöidä yhden henkilön tiedot, saa argumenttina henkilö-olion, josta destrukturoidaan nimi ja numero\n// huom. App-komponentti ei kutsu tätä suoraan vaan Persons-komponentti kutsuu\nconst Contact = ( props ) => {\n    return (\n        <li>{props.person.name} {props.person.number} <button onClick={event => props.handleDeletePerson(props.person.name, props.person.id)}>delete</button></li>\n    )\n}\n\nexport default Contact","import React from 'react'\nimport Contact from './Contact'\n// App kutsuu tätä komponenttia ja tämä komponennti suodattaa hakutulokset ja kutsuu Contact-komponenttia, \n// joka esittää hakutulokset henkilö kerrallaan\n\nconst Persons = ( props ) => {\n    return (\n        props.persons\n        .filter(props.ignore)\n          .map(person => <Contact key={person.id} person={person} handleDeletePerson={props.handleDeletePerson} />)\n    )\n  }\n\nexport default Persons","import React from 'react'\n// tämä komponentti vastaa hakufiltteri-kentästä\n// saa argumenttina hakukentän arvon (tässä filter) ja tapahtumankäsittelijän:\n// -> kun kentän arvo (onChange) muuttuu niin kutsutaan handleFilterChange-funktiota (tässä handler)\n\nconst SearchFilter = ({ filter, handler}) => {\n    return (\n        <div>\n            filter by name: <input value={filter} onChange={handler} />\n        </div>\n    )\n}\n\nexport default SearchFilter","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n// FRONTEND: backendin kanssa tapahtuvat kommunikointi on eristetty tähän moduuliin, mm. axiosin käyttö poistettu app.js:stä ja tehdään tässä\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst createPerson = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst updatePerson = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n    \n}\n\nconst deletePerson = id => {\n    console.log('poistamista kutsuttu')\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => {\n        return response.data\n    })\n}\n\n// exportataan olio, vasemmalla olion kentät, oikealla täällä määritellyt muuttujat\nexport default {\n    getAll: getAll,\n    createPerson: createPerson,\n    updatePerson: updatePerson,\n    deletePerson: deletePerson\n}","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n    // className tässä css:ää / tyylitiedostoa varten\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport SearchFilter from './components/SearchFilter'\nimport dbService from './services/names'\nimport Notification from './components/Notification'\n\n\n// json-serverin käynnistys: npx json-server --port=3001 --watch db.json\n\nconst App = (props) => {\n  //  state hookit, jotka säilyttävät muuttujan tilan ja mahdollistavat sen asettamisen\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // useEffect-hook, joka hakee datan \"palvelimelta\"\n  useEffect(() => {\n    dbService.getAll().then(response => {\n      setPersons(response)\n    })\n  }, [])\n  // tapahtumakäsittelijä, nuolisyntaksi, argumenttina event, luo uuden henkilö-olion\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      id: Math.floor(Math.random() * 101)\n    }\n    // a number update\n    if (persons.map(x => x.name).includes(newName)) {\n      if (window.confirm(`${newName} is already added to the phonebook, replace the old number with a new number?`)) {\n        const person = persons.find(p => p.name === newName)\n        const changedPerson = { ...person, number: newNumber }\n        dbService\n          .updatePerson(person.id, changedPerson).then(returnedPerson => {\n            setPersons(persons.map(p => p.id !== person.id ? p : changedPerson))\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n            setNewName('')\n            setNewNumber('')\n            setErrorMessage(`Updated number for ${newName}`)\n          })\n      }\n      //creating a new person\n    } else {\n      dbService.createPerson(personObject)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n          setNewName('')\n          setNewNumber('')\n          setErrorMessage(`Added ${newName}`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setErrorMessage(error.response.data.error)\n        })\n    }\n  }\n\n  // nämä funktiot tarkkailevat input-kenttien tilaa ja asettavat uuden arvon muuttujalle\n  // console.log(event.target.value), tämä tulostaa konsoliin mitä syöttökentässä lukee\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n  const handleNewNumber = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n  // funktio muuntaa henkilön nimen isoiksi kirjaimiksi, että haku on case insensitive\n  const ignoreCase = (person) => (\n    person.name.toUpperCase()\n      .includes(newFilter.toUpperCase())\n  )\n\n  const handleDeletePerson = (name, id) => {\n    if (window.confirm(`Delete ${name} ?`)) {\n      dbService\n        .deletePerson(id)\n        .then(() => {\n          setPersons(persons.filter(n => n.id !== id))\n          setErrorMessage(`Removed ${name}`)\n          setNewName(\"\")\n          setNewNumber(\"\")\n        })\n        .catch(error => {\n          setPersons(persons.filter(n => n.name !== name));\n          setErrorMessage(`Käyttäjä ${name} on jo poistettu palvelimelta.`);\n        });\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 3000);\n    }\n  };\n\n\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={errorMessage} />\n      <SearchFilter filter={newFilter} handler={handleFilterChange} />\n      <h2>Add a new person</h2>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNewNumber={handleNewNumber}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons}\n        ignore={ignoreCase}\n        handleDeletePerson={handleDeletePerson}\n      />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}